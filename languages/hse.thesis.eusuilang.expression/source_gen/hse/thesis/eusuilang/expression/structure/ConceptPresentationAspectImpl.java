package hse.thesis.eusuilang.expression.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_BinaryMathExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ElementType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LogicalExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathAssigment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathBooleanType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathVarDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathVarReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NumberType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnaryMathExpression = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BinaryMathExpression:
        return props_BinaryMathExpression;
      case LanguageConceptSwitch.ElementType:
        return props_ElementType;
      case LanguageConceptSwitch.LogicalExpression:
        return props_LogicalExpression;
      case LanguageConceptSwitch.MathAssigment:
        return props_MathAssigment;
      case LanguageConceptSwitch.MathBooleanType:
        return props_MathBooleanType;
      case LanguageConceptSwitch.MathExpression:
        return props_MathExpression;
      case LanguageConceptSwitch.MathType:
        return props_MathType;
      case LanguageConceptSwitch.MathVarDeclaration:
        return props_MathVarDeclaration;
      case LanguageConceptSwitch.MathVarReference:
        return props_MathVarReference;
      case LanguageConceptSwitch.NumberType:
        return props_NumberType;
      case LanguageConceptSwitch.UnaryMathExpression:
        return props_UnaryMathExpression;
    }
    return null;
  }
}
